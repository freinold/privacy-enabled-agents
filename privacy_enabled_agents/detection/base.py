from abc import ABC, abstractmethod
from collections.abc import Sequence
from typing import Any, Literal

from langchain_core.runnables import RunnableConfig, RunnableSerializable
from pydantic import Field

from privacy_enabled_agents.base import Entity


class DetectionValidationException(Exception):
    """Exception raised when the input text is invalid."""


class BaseDetector(RunnableSerializable[str, list[Entity]], ABC):
    """
    Abstract base class for implementing various detection techniques on different categories of data.

    Provides a common interface for all detection techniques.
    """

    supported_entities: set[str] | Literal["ANY"] = Field(
        default="ANY",
        description="Supported entities for the detector.",
    )

    def get_supported_entities(self) -> set[str] | Literal["ANY"]:
        """
        Returns the set of entities supported by this detector.

        Returns:
            set[str] | Literal["ANY"]: The set of supported entities.
        """
        return self.supported_entities

    @abstractmethod
    def invoke(
        self,
        input: str,
        config: RunnableConfig | None = None,
        *,
        threshold: float | None = None,
        **kwargs: Any,
    ) -> list[Entity]:
        """Invokes the detector on the given input.

        Args:
            input (str): The input to be analyzed.
            config (RunnableConfig | None, optional): Configuration for the detection process. Defaults to None.

        Returns:
            list[Entity]: The output of the detection process.
        """
        pass

    @abstractmethod
    def batch(
        self,
        inputs: Sequence[str],
        config: RunnableConfig | list[RunnableConfig] | None = None,
        *,
        threshold: float | None = None,
        **kwargs: Any,
    ) -> list[list[Entity]]:
        """Processes a batch of inputs.

        Args:
            inputs (Sequence[str]): A sequence of inputs to be processed by the detector.
            config (RunnableConfig | list[RunnableConfig] | None, optional): Configuration(s) for the detector. Defaults to None.
            threshold (float | None, optional): Threshold for the model to consider an entity as a PII entity. Defaults to None.

        Returns:
            list[Entity]: A list of outputs generated by the detector for the given inputs.
        """
        pass

    def validate_text(self, text: str | None) -> None:
        """
        Validates the input text.

        Args:
            text (str | None): The text to be validated.

        Raises:
            DetectionValidationException: If the input text is invalid.
        """
        if text is None:
            raise ValueError("Input text must not be None.")
        elif not isinstance(text, str):
            raise ValueError("Input text must be a string.")

    def validate_threshold(self, threshold: float | None) -> None:
        """
        Validates the threshold value.

        Args:
            threshold (float | None): The threshold value to be validated.

        Raises:
            DetectionValidationException: If the threshold value is invalid.
        """
        if threshold is None:
            pass
        elif not isinstance(threshold, float):
            raise ValueError("Threshold must be a float.")
        elif threshold < 0.0 or threshold > 1.0:
            raise ValueError("Threshold must be between 0.0 and 1.0.")
